<?php

namespace App\Repository;

use App\Domain\Recipe;
use App\Source\Contract\RecipeSource;
use App\Hydrator\RecipeHydrator;

class RecipeRepositoryTest extends \PHPUnit\Framework\TestCase
{
    public function setUp()
    {
        parent::setUp();

        $this->source = $this->createMock(RecipeSource::class);
        $this->hydrator = $this->createMock(RecipeHydrator::class);

        $this->sut = new RecipeRepository(
            $this->source,
            $this->hydrator
        );
    }

    /**
     * @test
     */
    public function itBeInstantiable()
    {
        $this->assertInstanceOf(
            '\App\Repository\RecipeRepository',
            $this->sut
        );
    }

    /**
     * @test
     */
    public function whenFindingARecipeByIdItShouldCallASourceAndAHydrator()
    {
        $recipeData = (object) [
            'id' => 1,
            'name' => 'Ham Toastie',
            'description' => 'lazy mans meal',
            'method' => 'make it.',
            'servings' => 1
        ];

        $this->source->expects($this->once())
            ->method('findById')
            ->with($this->equalTo(1))
            ->willReturn($recipeData);

        $this->hydrator->expects($this->once())
            ->method('hydrate')
            ->with($this->equalTo($recipeData));

        $this->sut->findById(1);
    }

    /**
     * @test
     */
    public function whenFindingAllRecipesItShouldCallASourceOneAndTheHydratorMultipleTimes()
    {
        $this->source->expects($this->once())
            ->method('findAll')
            ->willReturn([
                (object) [],
                (object) []]
            );

        $this->hydrator->expects($this->exactly(2))
            ->method('hydrate');

        $this->sut->findAll();
    }

    // TODO: add functional tests here
}

class RecipeRepository
{
    public function __construct(RecipeSource $source, RecipeHydrator $hydrator)
    {
        $this->source = $source;
        $this->hydrator = $hydrator;
    }

    public function findById(int $recipeId) : Recipe
    {
        $recipeData = $this->source->findById($recipeId);

        return $this->hydrator->hydrate($recipeData);
    }

    public function findAll() : array
    {
        $recipeData = $this->source->findAll();

        return array_map(
            function ($recipe) {
                return $this->hydrator->hydrate($recipe);
            },
            $recipeData
        );
    }
}